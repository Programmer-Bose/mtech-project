import numpy as np

# Hardcoded task coordinates (task_id: (x, y))
TASK_COORDINATES_30 = {0: (0.69705, 0.65912), 1: (0.72966, 0.74986), 2: (0.1696, 0.0068), 
                        3: (0.84208, 0.32632), 4: (0.83636, 0.36766), 5: (0.89403, 0.81913), 
                        6: (0.10039, 0.20462), 7: (0.54908, 0.06478), 8: (0.13489, 0.9508), 
                        9: (0.06335, 0.23856), 10: (0.79052, 0.4825), 11: (0.37287, 0.58046), 
                        12: (0.78679, 0.00468), 13: (0.85591, 0.9104), 14: (0.03169, 0.23075), 
                        15: (0.16304, 0.64752), 16: (0.56675, 0.21116), 17: (0.09113, 0.81652), 
                        18: (0.52155, 0.74205), 19: (0.39718, 0.93534), 20: (0.12136, 0.68844), 
                        21: (0.60087, 0.20341), 22: (0.85873, 0.20238), 23: (0.56802, 0.30087), 
                        24: (0.34087, 0.24421), 25: (0.69079, 0.22627), 26: (0.77693, 0.21814), 
                        27: (0.23676, 0.75051), 28: (0.57872, 0.44212), 29: (0.8314, 0.28604)}

TASK_COORDINATES_40 = {0: (0.90318, 0.71116), 1: (0.66902, 0.20821), 2: (0.59972, 0.20234), 
                            3: (0.6574, 0.02495), 4: (0.77449, 0.54189), 5: (0.48243, 0.88518), 
                            6: (0.55481, 0.14075), 7: (0.41056, 0.42908), 8: (0.94914, 0.58756), 
                            9: (0.72005, 0.48707), 10: (0.19843, 0.43462), 11: (0.82829, 0.18231), 
                            12: (0.5324, 0.32685), 13: (0.11097, 0.61803), 14: (0.62434, 0.08915), 
                            15: (0.20747, 0.91413), 16: (0.08521, 0.30435), 17: (0.87785, 0.53283), 
                            18: (0.69118, 0.82195), 19: (0.24643, 0.48897), 20: (0.25995, 0.02868), 
                            21: (0.87657, 0.76459), 22: (0.23156, 0.1673), 23: (0.28235, 0.88021), 
                            24: (0.4993, 0.38681), 25: (0.00746, 0.24658), 26: (0.47406, 0.45365), 
                            27: (0.83066, 0.71971), 28: (0.24178, 0.77467), 29: (0.41569, 0.03054), 
                            30: (0.35135, 0.83975), 31: (0.1866, 0.27806), 32: (0.83025, 0.64342), 
                            33: (0.87005, 0.76254), 34: (0.0628, 0.15501), 35: (0.73363, 0.21887), 
                            36: (0.3021, 0.23569), 37: (0.50416, 0.94732), 38: (0.09664, 0.52958), 
                            39: (0.33753, 0.19727)}

TASK_COORDINATES = TASK_COORDINATES_40
# Hardcoded robot depot coordinates (robot_id: (x, y))
ROBOT_DEPOTS = {
    0: (0.5, 0.05),   # Robot 0's base
    1: (0.5, 0.05),   # Robot 1's base
    2: (0.5, 0.95),   # Robot 2's base
    3: (0.5, 0.95),   # Robot 3's base
}

# Hardcoded robot task sequences: List[List[int]]
ROBOT_TASKS = [
    [6,2,1,35,11,3,14],         # Robot 0
    [29,20,22,34,25,16,31,36,39], # Robot 1
    [30,23,15,28,13,38,19,10,12,24,7,26,5,37], # Robot 2
    [18,27,32,4,9,17,8,0,21,33], # Robot 3

]

def euclidean(p1, p2):
    return np.linalg.norm(np.array(p1) - np.array(p2))

def compute_fitness(coords, depots, robot_tasks):
    total = 0.0
    max_len = 0.0

    for r_id, tasks in enumerate(robot_tasks):
        if not tasks:
            continue
        depot = depots[r_id]
        path = [depot] + [coords[t] for t in tasks] + [depot]
        length = sum(euclidean(path[i], path[i+1]) for i in range(len(path)-1))
        print(f"Robot {r_id} → Tasks {tasks} → Length = {length:.3f}")
        total += length
        max_len = max(max_len, length)

    return total, max_len

if __name__ == "__main__":
    f1, f2 = compute_fitness(TASK_COORDINATES, ROBOT_DEPOTS, ROBOT_TASKS)
    print("\n--- Fitness ---")
    print(f"F1 (Total Path Length) = {f1:.3f}")
    print(f"F2 (Max Robot Path)    = {f2:.3f}")


#40
# Robot 0 → Tasks [6, 2, 1, 35, 11, 3, 14] → Length = 0.854
# Robot 1 → Tasks [29, 20, 22, 34, 25, 16, 31, 36, 39] → Length = 1.256
# Robot 2 → Tasks [30, 23, 15, 28, 13, 38, 19, 10, 12, 24, 7, 26, 5, 37] → Length = 2.100
# Robot 3 → Tasks [18, 27, 32, 4, 9, 17, 8, 0, 21, 33] → Length = 1.540

# --- Fitness ---
# F1 (Total Path Length) = 5.750
# F2 (Max Robot Path)    = 2.100